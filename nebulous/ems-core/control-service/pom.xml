<!--
  ~ Copyright (C) 2017-2023 Institute of Communication and Computer Systems (imu.iccs.gr)
  ~
  ~ This Source Code Form is subject to the terms of the Mozilla Public License, v2.0, unless
  ~ Esper library is used, in which case it is subject to the terms of General Public License v2.0.
  ~ If a copy of the MPL was not distributed with this file, you can obtain one at
  ~ https://www.mozilla.org/en-US/MPL/2.0/
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>gr.iccs.imu.ems</groupId>
        <artifactId>ems-core</artifactId>
        <version>${revision}</version>
    </parent>

    <artifactId>control-service</artifactId>
    <name>EMS - Control Service</name>

    <properties>
        <!-- Build timestamp -->
        <timestamp>${maven.build.timestamp}</timestamp>
        <maven.build.timestamp.format>yyyy-MM-dd HH:mm:ss</maven.build.timestamp.format>

        <docker.controlServiceJar>${project.build.finalName}.jar</docker.controlServiceJar>
        <docker.esperJar>esper-${esper.version}.jar</docker.esperJar>

        <docker.image.name>ems-server</docker.image.name>
        <docker.image.tag>unknown</docker.image.tag>
        <build.description>-----</build.description>
        <docker.user>emsuser</docker.user>
        <docker.user.home>/opt/ems-server</docker.user.home>

        <!-- EMS server main class -->
        <start-class>gr.iccs.imu.ems.control.ControlServiceApplication</start-class>
    </properties>

    <dependencies>
        <!-- JWT dependencies -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>${jjwt.version}</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>${jjwt.version}</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId> <!-- or jjwt-gson if Gson is preferred -->
            <version>${jjwt.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>com.fasterxml.jackson.core</groupId>
                    <artifactId>jackson-databind</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Dependencies on other EMS modules -->
        <dependency>
            <groupId>gr.iccs.imu.ems</groupId>
            <artifactId>baguette-server</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>gr.iccs.imu.ems</groupId>
            <artifactId>baguette-client-install</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>gr.iccs.imu.ems</groupId>
            <artifactId>broker-cep</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>gr.iccs.imu.ems</groupId>
            <artifactId>common</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>gr.iccs.imu.ems</groupId>
            <artifactId>translator</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>gr.iccs.imu.ems</groupId>
            <artifactId>util</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>gr.iccs.imu.ems</groupId>
            <artifactId>broker-client</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- Spring-boot dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- Spring Boot Validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- Spring Boot Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <!-- Spring Boot Webflux -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
        </dependency>
        <!-- Spring Boot Actuator  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- Micrometer Prometheus registry  -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <version>${micrometer.registry.prometheus.version}</version>
        </dependency>
        <!-- Spring Boot Admin client  -->
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
            <version>${spring.boot.admin.version}</version>
        </dependency>
        <!-- Jasypt Spring Boot starter  -->
        <dependency>
            <groupId>com.github.ulisesbocchio</groupId>
            <artifactId>jasypt-spring-boot-starter</artifactId>
            <version>${jasypt.starter.version}</version>
        </dependency>

        <!-- Lombok project -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <!-- See: https://github.com/sevdokimov/log-viewer/blob/master/_docs/embadded-spring-boot.md -->
        <!--XXX: TODO: Temporarily disabled logviewer because follows EE8 (javax.*) rather than EE9 (jakarta.*)
        <dependency>
            <groupId>io.github.sevdokimov.logviewer</groupId>
            <artifactId>log-viewer-spring-boot</artifactId>
            <version>1.0.6</version>
        </dependency>-->

        <!-- Hawtio console dependency (https://hawt.io/docs/get-started/) -->
        <dependency>
            <groupId>io.hawt</groupId>
            <artifactId>hawtio-springboot</artifactId>
            <version>${hawtio.version}</version>
        </dependency>

        <!-- Springdoc: OpenAPI UI and Swagger -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webflux-ui</artifactId>
            <version>${springdoc.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>*.txt</include>
                    <include>META-INF/spring.factories</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <!-- Remove previous files from /public_resources -->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>${maven-clean-plugin.version}</version>
                <executions>
                    <execution>
                        <id>remove-old-public-resources</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--<excludeDefaultDirectories>true</excludeDefaultDirectories>-->
                    <filesets>
                        <fileset>
                            <directory>${project.parent.basedir}/public_resources</directory>
                            <includes>
                                <include>**/*</include>
                            </includes>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>

            <!-- See: https://github.com/git-commit-id/git-commit-id-maven-plugin -->
            <plugin>
                <groupId>io.github.git-commit-id</groupId>
                <artifactId>git-commit-id-maven-plugin</artifactId>
                <version>${git-commit-id-maven-plugin.version}</version>
                <!--<executions>
                    <execution>
                        <id>get-the-git-infos</id>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                        <phase>initialize</phase>
                    </execution>
                </executions>
                <configuration>
                    <generateGitPropertiesFile>true</generateGitPropertiesFile>
                    <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
                    <commitIdGenerationMode>full</commitIdGenerationMode>
                </configuration>-->
                <configuration>
                    <failOnNoGitDirectory>false</failOnNoGitDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <id>original-jar</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <classifier>original</classifier>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>gr.iccs.imu.ems</groupId>
                            <artifactId>baguette-client</artifactId>
                        </exclude>
                        <exclude>
                            <groupId>com.espertech</groupId>
                            <artifactId>esper</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <id>build-info</id>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                        <configuration>
                            <additionalProperties>
                                <timestamp>${timestamp}</timestamp>
                                <buildNumber>${buildNumber}</buildNumber>
                            </additionalProperties>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-esper-jar</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.espertech</groupId>
                                    <artifactId>esper</artifactId>
                                    <version>${esper.version}</version>
                                    <type>jar</type>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>gr.iccs.imu.ems</groupId>
                                    <artifactId>baguette-client</artifactId>
                                    <version>${project.version}</version>
                                    <type>tgz</type>
                                    <classifier>installation-package</classifier>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                    <destFileName>baguette-client-installation-package.tgz</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Checksum Maven plugin (http://checksum-maven-plugin.nicoulaj.net) -->
            <plugin>
                <groupId>net.nicoulaj.maven.plugins</groupId>
                <artifactId>checksum-maven-plugin</artifactId>
                <version>${net.nicoulaj.checksum-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>files</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <fileSets>
                        <fileSet>
                            <directory>${project.build.directory}</directory>
                            <!--<directory>target</directory>-->
                            <includes>
                                <include>*.zip</include>
                                <include>*.tar</include>
                                <include>*.tar.gz</include>
                                <include>*.tgz</include>
                            </includes>
                            <excludes>
                                <exclude>*.jar</exclude>
                            </excludes>
                        </fileSet>
                    </fileSets>
                    <algorithms>
                        <algorithm>SHA256</algorithm>
                    </algorithms>
                    <individualFiles>true</individualFiles>
                    <failOnError>true</failOnError>
                    <failIfNoFiles>false</failIfNoFiles>
                </configuration>
            </plugin>

            <!-- Copy files to /public_resources -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>${maven-antrun-plugin.version}</version>
                <executions>
                    <execution>
                        <id>copy-files</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <!-- Copy index.html and favicon.ico to /public_resources -->
                                <copy overwrite="true" failonerror="false"
                                      file="${project.basedir}/src/main/resources/public/index.html"
                                      tofile="../public_resources/resources/index.html" />
                                <copy overwrite="true" failonerror="false"
                                      file="${project.basedir}/src/main/resources/public/favicon.ico"
                                      tofile="../public_resources/favicon.ico" />

                                <!-- Copy checksums.csv to /public_resources -->
                                <copy overwrite="true" failonerror="false"
                                      file="${project.build.directory}/checksums.csv"
                                      tofile="../public_resources/resources/checksums.csv" />

                                <!-- Copy broker-client files to /public_resources -->
                                <copy overwrite="true" failonerror="false"
                                      file="../broker-client/target/broker-client-jar-with-dependencies.jar"
                                      tofile="../public_resources/resources/broker-client.jar" />
                                <copy overwrite="true" failonerror="false"
                                      file="${project.basedir}/src/main/resources/public/client.sh"
                                      tofile="../public_resources/resources/client.sh" />
                                <copy overwrite="true" failonerror="false"
                                      file="${project.basedir}/src/main/resources/public/client.bat"
                                      tofile="../public_resources/resources/client.bat" />

                                <!-- Copy baguette-client files to /public_resources -->
                                <copy overwrite="true" failonerror="true"
                                      file="${project.build.directory}/baguette-client-installation-package.tgz"
                                      tofile="../public_resources/resources/baguette-client.tgz" />
                                <copy overwrite="true" failonerror="true"
                                      file="${project.build.directory}/baguette-client-installation-package.tgz.sha256"
                                      tofile="../public_resources/resources/baguette-client.tgz.sha256" />
                                <copy overwrite="true" failonerror="false"
                                      file="../baguette-client/bin/install.sh"
                                      tofile="../public_resources/resources/install.sh" />
                                <copy overwrite="true" failonerror="true"
                                      file="../baguette-client/bin/jre-install.sh"
                                      tofile="../public_resources/resources/jre-install.sh" />
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
                <executions>
                    <!-- Copy Web Admin distribution files to /public_resources -->
                    <execution>
                        <id>copy-web-admin-resources</id>
                        <!-- here the phase you need -->
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.parent.basedir}/public_resources/admin</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.parent.basedir}/web-admin/dist</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>

                    <!-- Add needed files to docker context folder -->
                    <execution>
                        <id>copy-resources-to-docker-context</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/docker</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/main/docker</directory>
                                </resource>

                                <resource>
                                    <targetPath>${project.build.directory}/docker/jars</targetPath>
                                    <directory>${project.build.directory}</directory>
                                    <include>${docker.controlServiceJar}</include>
                                    <include>${docker.esperJar}</include>
                                    <filtering>false</filtering>
                                </resource>
                                <resource>
                                    <targetPath>${project.build.directory}/docker/bin</targetPath>
                                    <directory>${project.basedir}/../bin/</directory>
                                    <include>run.sh</include>
                                    <include>sysmon.sh</include>
                                    <include>detect.sh</include>
                                    <include>jwtutil.sh</include>
                                    <filtering>false</filtering>
                                </resource>
                                <resource>
                                    <targetPath>${project.build.directory}/docker/config</targetPath>
                                    <directory>${project.basedir}/../config-files</directory>
                                    <!--<excludes>
                                        <exclude>resources/**/*</exclude>
                                    </excludes>-->
                                    <filtering>false</filtering>
                                </resource>

                                <!-- Add public_resources/ folder resources to '/public_resources' -->
                                <resource>
                                    <targetPath>${project.build.directory}/docker/public_resources</targetPath>
                                    <directory>${project.basedir}/../public_resources</directory>
                                    <filtering>false</filtering>
                                </resource>

                                <!-- Add broker-client too -->
                                <resource>
                                    <targetPath>${project.build.directory}/docker/jars</targetPath>
                                    <directory>${project.basedir}/../broker-client/target</directory>
                                    <include>broker-client-jar-with-dependencies.jar</include>
                                    <filtering>false</filtering>
                                </resource>
                                <resource>
                                    <targetPath>${project.build.directory}/docker/bin</targetPath>
                                    <directory>${project.basedir}/../bin/</directory>
                                    <include>client.sh</include>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>dev-local-docker-image-build</id>
            <activation>
                <file>
                    <exists>../.dev-local-docker-image-build</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <!-- Read docker plugin settings from properties file -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <version>${properties-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>read-docker-image-properties</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <!--<keyPrefix>dev-</keyPrefix>-->
                            <files>
                                <file>../.dev-local-docker-image-build</file>
                            </files>
                            <outputFile/>
                            <properties/>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>build-docker-image</id>
            <activation>
                <file><exists>.</exists></file>
            </activation>
            <build>
                <plugins>
                    <!-- Rename docker context folder to 'docker-context'. Remove previous if exists. -->
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>${maven-antrun-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>set-docker-properties</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <exportAntProperties>true</exportAntProperties>
                                    <target unless="docker.image.tag">
                                        <property name="docker.image.tag" value="${project.version}"/>
                                        <property name="build.description" value=""/>
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>delete-old-and-copy-new-docker-context</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- delete-old-docker-context -->
                                        <delete dir="${project.build.directory}/docker-context"/>

                                        <!--<echo>Print Docker image dev properties</echo>
                                        <echo>Image Tag: "${docker.image.tag}"</echo>
                                        <echo>Description: "${build.description}"</echo>-->

                                        <!-- rename-docker-context-dir -->
                                        <sleep seconds="2" />
                                        <move file="${project.build.directory}/docker/"
                                              tofile="${project.build.directory}/docker-context/" />
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>


                    <!-- Build docker image using docker-context folder -->
                    <!--<plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${docker-maven-plugin.version}</version>
                        <configuration>
                            &lt;!&ndash;<dockerHost>https://localhost:2376</dockerHost>&ndash;&gt;
                            <verbose>true</verbose>
                            <useColor>true</useColor>
                            <images>
                                <image>
                                    <name>${docker.image.name}:${docker.image.tag}</name>
                                    <build>
                                        <contextDir>${project.build.directory}/docker-context</contextDir>
                                        <args>
                                            <EMS_USER>${docker.user}</EMS_USER>
                                            <EMS_HOME>${docker.user.home}</EMS_HOME>
                                        </args>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                        <executions>
                            <execution>
                                <id>docker-image-build</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>-->

                    <!-- Write actual docker image properties to file -->
                    <plugin>
                        <groupId>com.internetitem</groupId>
                        <artifactId>write-properties-file-maven-plugin</artifactId>
                        <version>${write-properties-file-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>write-docker-image-properties-file</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>write-properties-file</goal>
                                </goals>
                                <configuration>
                                    <filename>docker-image.properties</filename>
                                    <outputDirectory>${project.build.directory}/</outputDirectory>
                                    <properties>
                                        <property>
                                            <name>docker.image.name</name>
                                            <value>${docker.image.name}</value>
                                        </property>
                                        <property>
                                            <name>docker.image.tag</name>
                                            <value>${docker.image.tag}</value>
                                        </property>
                                        <property>
                                            <name>docker.user</name>
                                            <value>${docker.user}</value>
                                        </property>
                                        <property>
                                            <name>docker.user.home</name>
                                            <value>${docker.user.home}</value>
                                        </property>
                                    </properties>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-install-plugin</artifactId>
                        <version>${maven-install-plugin.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>install-file</goal>
                                </goals>
                                <phase>install</phase>
                                <configuration>
                                    <file>${project.build.directory}/docker-image.properties</file>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <groupId>${project.groupId}</groupId>
                                    <version>${project.version}</version>
                                    <classifier>docker-image</classifier>
                                    <packaging>pom</packaging>
                                    <generatePom>false</generatePom>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>
        </profile>
    </profiles>

</project>
